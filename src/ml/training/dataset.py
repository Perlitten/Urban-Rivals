#!/usr/bin/env python3
"""
Urban Rivals ML Dataset Creation and Preprocessing
–°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π
"""

import json
import pandas as pd
import numpy as np
import requests
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import sqlite3
from datetime import datetime, timedelta
import time

class UrbanRivalsDataCollector:
    """–°–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ–± Urban Rivals"""
    
    def __init__(self, output_dir: str = "datasets"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –∫–ª–∞–Ω–∞—Ö –∏ –∏—Ö –±–æ–Ω—É—Å–∞—Ö
        self.clans_data = {
            'All Stars': {'bonus': '+2 Life', 'type': 'life'},
            'Bangers': {'bonus': '+2 Power', 'type': 'power'},
            'Fang Pi Clang': {'bonus': '+2 Damage', 'type': 'damage'},
            'Freaks': {'bonus': '+2 Poison', 'type': 'poison'},
            'Ulu Watu': {'bonus': '+2 Power', 'type': 'power'},
            'Montana': {'bonus': '-12 Opp Attack', 'type': 'attack_reduce'},
            'Uppers': {'bonus': '-10 Opp Attack', 'type': 'attack_reduce'},
            'Sakrohm': {'bonus': '-8 Opp Attack', 'type': 'attack_reduce'},
            'Nightmare': {'bonus': '-2 Opp Life', 'type': 'life_reduce'},
            'Piranas': {'bonus': '-2 Opp Power', 'type': 'power_reduce'},
            'Skeelz': {'bonus': 'Protection: Ability', 'type': 'protection'},
            'Roots': {'bonus': 'Stop: Ability', 'type': 'stop'},
            'GHEIST': {'bonus': 'Stop: Ability', 'type': 'stop'},
            'Pussycats': {'bonus': 'Damage = 1', 'type': 'damage_reduce'},
            'Rescue': {'bonus': '+1 Life per Damage', 'type': 'life_per_damage'},
            'Sentinels': {'bonus': '+8 Attack', 'type': 'attack'},
            'La Junta': {'bonus': '+2 Damage', 'type': 'damage'},
            'Junkz': {'bonus': '+8 Attack', 'type': 'attack'}
        }
    
    def create_cards_database(self) -> pd.DataFrame:
        """–°–æ–∑–¥–∞—ë—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç Urban Rivals"""
        print("üÉè –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç...")
        
        cards_data = []
        
        # –°–∏–º—É–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ - –ø–∞—Ä—Å–∏–Ω–≥ —Å–∞–π—Ç–∞)
        rarities = ['Common', 'Uncommon', 'Rare', 'Legendary']
        
        card_id = 1
        for clan, clan_info in self.clans_data.items():
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 15-25 –∫–∞—Ä—Ç –Ω–∞ –∫–ª–∞–Ω
            for i in range(15, 26):
                rarity = np.random.choice(rarities, p=[0.5, 0.3, 0.15, 0.05])
                
                # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
                base_power = {
                    'Common': np.random.randint(4, 7),
                    'Uncommon': np.random.randint(6, 8),
                    'Rare': np.random.randint(7, 9),
                    'Legendary': np.random.randint(8, 10)
                }[rarity]
                
                base_damage = {
                    'Common': np.random.randint(2, 5),
                    'Uncommon': np.random.randint(4, 6),
                    'Rare': np.random.randint(5, 8),
                    'Legendary': np.random.randint(7, 10)
                }[rarity]
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è
                levels_data = {}
                for level in range(1, 6):
                    power_bonus = (level - 1) * np.random.randint(0, 2)
                    damage_bonus = (level - 1) * np.random.randint(0, 2)
                    
                    levels_data[f"power_level_{level}"] = base_power + power_bonus
                    levels_data[f"damage_level_{level}"] = base_damage + damage_bonus
                
                # –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–∞—Ä—Ç)
                has_ability = np.random.random() < 0.7
                ability_types = ['+2 Power', '+2 Damage', '+1 Life', 'Stop Opp Ability', 
                               'Protection: Ability', '-2 Opp Power', '-2 Opp Damage']
                ability = np.random.choice(ability_types) if has_ability else None
                
                card_data = {
                    'card_id': f"card_{card_id}",
                    'name': f"{clan} Fighter {i}",
                    'clan': clan,
                    'rarity': rarity,
                    'ability': ability,
                    'ability_unlock_level': np.random.randint(2, 5) if has_ability else None,
                    'release_date': datetime.now() - timedelta(days=np.random.randint(1, 1000)),
                    **levels_data
                }
                
                cards_data.append(card_data)
                card_id += 1
        
        cards_df = pd.DataFrame(cards_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª—ã
        cards_df.to_csv(self.output_dir / "cards_database.csv", index=False)
        cards_df.to_json(self.output_dir / "cards_database.json", orient='records')
        
        print(f"‚úÖ –ë–∞–∑–∞ –∫–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∞: {len(cards_df)} –∫–∞—Ä—Ç, {len(self.clans_data)} –∫–ª–∞–Ω–æ–≤")
        return cards_df
    
    def generate_battle_data(self, cards_df: pd.DataFrame, num_battles: int = 10000) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –±–æ—è—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        print(f"‚öîÔ∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è {num_battles} –±–æ—ë–≤...")
        
        battles_data = []
        
        for battle_id in range(num_battles):
            # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä 4 –∫–∞—Ä—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
            player_cards = cards_df.sample(4)
            opponent_cards = cards_df.sample(4)
            
            # –°–∏–º—É–ª—è—Ü–∏—è –±–æ—è
            battle_result = self._simulate_battle(player_cards, opponent_cards)
            
            battle_data = {
                'battle_id': f"battle_{battle_id}",
                'timestamp': datetime.now() - timedelta(minutes=np.random.randint(1, 10000)),
                'player_deck': player_cards['card_id'].tolist(),
                'opponent_deck': opponent_cards['card_id'].tolist(),
                'winner': battle_result['winner'],
                'rounds_data': battle_result['rounds'],
                'final_score': battle_result['final_score'],
                'game_duration': np.random.randint(3, 8)  # –º–∏–Ω—É—Ç—ã
            }
            
            battles_data.append(battle_data)
            
            if battle_id % 1000 == 0:
                print(f"  üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {battle_id} –±–æ—ë–≤...")
        
        battles_df = pd.DataFrame(battles_data)
        battles_df.to_csv(self.output_dir / "battles_database.csv", index=False)
        battles_df.to_json(self.output_dir / "battles_database.json", orient='records')
        
        print(f"‚úÖ –ë–∞–∑–∞ –±–æ—ë–≤ —Å–æ–∑–¥–∞–Ω–∞: {len(battles_df)} –∑–∞–ø–∏—Å–µ–π")
        return battles_df
    
    def _simulate_battle(self, player_cards: pd.DataFrame, opponent_cards: pd.DataFrame) -> Dict:
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –±–æ–π –º–µ–∂–¥—É –¥–≤—É–º—è –Ω–∞–±–æ—Ä–∞–º–∏ –∫–∞—Ä—Ç"""
        player_life = 12
        opponent_life = 12
        player_pills = 12
        opponent_pills = 12
        
        rounds = []
        
        for round_num in range(1, 5):  # –ú–∞–∫—Å–∏–º—É–º 4 —Ä–∞—É–Ω–¥–∞
            if player_life <= 0 or opponent_life <= 0:
                break
                
            # –í—ã–±–∏—Ä–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—É–Ω–¥–∞
            if round_num <= len(player_cards) and round_num <= len(opponent_cards):
                player_card = player_cards.iloc[round_num - 1]
                opponent_card = opponent_cards.iloc[round_num - 1]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏–ª—é–ª—å (—Å–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
                player_pills_used = min(np.random.randint(0, 6), player_pills)
                opponent_pills_used = min(np.random.randint(0, 6), opponent_pills)
                
                # –†–∞—Å—á—ë—Ç –∞—Ç–∞–∫–∏
                player_attack = player_card[f'power_level_5'] + player_pills_used
                opponent_attack = opponent_card[f'power_level_5'] + opponent_pills_used
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è —Ä–∞—É–Ω–¥–∞
                if player_attack > opponent_attack:
                    winner = 'player'
                    damage_dealt = player_card[f'damage_level_5']
                    opponent_life -= damage_dealt
                elif opponent_attack > player_attack:
                    winner = 'opponent'
                    damage_dealt = opponent_card[f'damage_level_5']
                    player_life -= damage_dealt
                else:
                    winner = 'draw'
                    damage_dealt = 0
                
                player_pills -= player_pills_used
                opponent_pills -= opponent_pills_used
                
                round_data = {
                    'round': round_num,
                    'player_card': player_card['card_id'],
                    'opponent_card': opponent_card['card_id'],
                    'player_pills_used': player_pills_used,
                    'opponent_pills_used': opponent_pills_used,
                    'player_attack': player_attack,
                    'opponent_attack': opponent_attack,
                    'winner': winner,
                    'damage_dealt': damage_dealt,
                    'player_life_after': player_life,
                    'opponent_life_after': opponent_life
                }
                
                rounds.append(round_data)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –±–æ—è
        if player_life > opponent_life:
            battle_winner = 'player'
        elif opponent_life > player_life:
            battle_winner = 'opponent'
        else:
            battle_winner = 'draw'
        
        return {
            'winner': battle_winner,
            'rounds': rounds,
            'final_score': {'player': player_life, 'opponent': opponent_life}
        }
    
    def generate_market_data(self, cards_df: pd.DataFrame, days: int = 180) -> pd.DataFrame:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ä—ã–Ω–∫–µ –∫–∞—Ä—Ç"""
        print(f"üí∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞ {days} –¥–Ω–µ–π...")
        
        market_data = []
        
        for day in range(days):
            date = datetime.now() - timedelta(days=day)
            
            # –î–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ü–µ–Ω—ã
            for _, card in cards_df.iterrows():
                # –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–µ–¥–∫–æ—Å—Ç–∏
                base_price = {
                    'Common': np.random.randint(50, 200),
                    'Uncommon': np.random.randint(150, 500),
                    'Rare': np.random.randint(400, 1500),
                    'Legendary': np.random.randint(1000, 5000)
                }[card['rarity']]
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è
                price_variation = np.random.normal(0, 0.1)
                current_price = int(base_price * (1 + price_variation))
                
                # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫
                transaction_count = np.random.poisson(5)
                
                market_entry = {
                    'date': date,
                    'card_id': card['card_id'],
                    'card_name': card['name'],
                    'price': max(1, current_price),
                    'transaction_count': transaction_count,
                    'total_volume': current_price * transaction_count
                }
                
                market_data.append(market_entry)
        
        market_df = pd.DataFrame(market_data)
        market_df.to_csv(self.output_dir / "market_data.csv", index=False)
        market_df.to_json(self.output_dir / "market_data.json", orient='records')
        
        print(f"‚úÖ –†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã: {len(market_df)} –∑–∞–ø–∏—Å–µ–π")
        return market_df
    
    def create_training_features(self, cards_df: pd.DataFrame, battles_df: pd.DataFrame) -> Dict:
        """–°–æ–∑–¥–∞—ë—Ç –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è ML –º–æ–¥–µ–ª–µ–π"""
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è ML...")
        
        # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç
        card_features = []
        for _, card in cards_df.iterrows():
            features = {
                'card_id': card['card_id'],
                'clan_encoded': list(self.clans_data.keys()).index(card['clan']),
                'rarity_encoded': ['Common', 'Uncommon', 'Rare', 'Legendary'].index(card['rarity']),
                'max_power': card['power_level_5'],
                'max_damage': card['damage_level_5'],
                'has_ability': 1 if card['ability'] else 0,
                'power_damage_ratio': card['power_level_5'] / max(card['damage_level_5'], 1),
                'total_stats': card['power_level_5'] + card['damage_level_5']
            }
            card_features.append(features)
        
        # –ü—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–æ—ë–≤
        battle_features = []
        for _, battle in battles_df.iterrows():
            if isinstance(battle['rounds_data'], list) and len(battle['rounds_data']) > 0:
                first_round = battle['rounds_data'][0]
                
                features = {
                    'battle_id': battle['battle_id'],
                    'player_total_attack': first_round.get('player_attack', 0),
                    'opponent_total_attack': first_round.get('opponent_attack', 0),
                    'attack_difference': first_round.get('player_attack', 0) - first_round.get('opponent_attack', 0),
                    'player_pills_used': first_round.get('player_pills_used', 0),
                    'opponent_pills_used': first_round.get('opponent_pills_used', 0),
                    'winner': battle['winner']
                }
                battle_features.append(features)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        card_features_df = pd.DataFrame(card_features)
        battle_features_df = pd.DataFrame(battle_features)
        
        card_features_df.to_csv(self.output_dir / "card_features.csv", index=False)
        battle_features_df.to_csv(self.output_dir / "battle_features.csv", index=False)
        
        print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: {len(card_features)} –∫–∞—Ä—Ç, {len(battle_features)} –±–æ—ë–≤")
        
        return {
            'card_features': card_features_df,
            'battle_features': battle_features_df
        }
    
    def export_for_tensorflowjs(self, features: Dict):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è TensorFlow.js"""
        print("üì¶ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è TensorFlow.js...")
        
        # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–∞
        export_data = {
            'metadata': {
                'version': '1.0.0',
                'created': datetime.now().isoformat(),
                'cards_count': len(features['card_features']),
                'battles_count': len(features['battle_features']),
                'clans': list(self.clans_data.keys())
            },
            'card_features': features['card_features'].to_dict('records'),
            'battle_features': features['battle_features'].to_dict('records'),
            'clans_data': self.clans_data
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π JSON
        with open(self.output_dir / "training_data.json", 'w', encoding='utf-8') as f:
            json.dump(export_data, f, ensure_ascii=False, separators=(',', ':'))
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ training_data.json")
        return export_data

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ Urban Rivals ML...")
    
    collector = UrbanRivalsDataCollector()
    
    # 1. –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –∫–∞—Ä—Ç
    cards_df = collector.create_cards_database()
    
    # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ –±–æ—è—Ö
    battles_df = collector.generate_battle_data(cards_df, num_battles=10000)
    
    # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    market_df = collector.generate_market_data(cards_df, days=180)
    
    # 4. –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML
    features = collector.create_training_features(cards_df, battles_df)
    
    # 5. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è TensorFlow.js
    export_data = collector.export_for_tensorflowjs(features)
    
    print("\nüéâ –î–∞—Ç–∞—Å–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    print(f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {collector.output_dir}")
    print(f"üÉè –ö–∞—Ä—Ç: {len(cards_df)}")
    print(f"‚öîÔ∏è –ë–æ—ë–≤: {len(battles_df)}")
    print(f"üí∞ –†—ã–Ω–æ—á–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(market_df)}")
    
    return export_data

if __name__ == "__main__":
    main() 
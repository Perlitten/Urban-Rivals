/**
 * Urban Rivals ML Model Loader - Optimized Version
 * –õ–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—è–∂–µ–ª—ã—Ö TensorFlow.js –º–æ–¥–µ–ª–µ–π
 */

import type { IBattleState, ICard, IMLModel } from '../common/types';

interface ModelMetadata {
  version: string;
  created: string;
  models: {
    battle_predictor: {
      type: string;
      accuracy: number;
      input_features: string[];
      output_classes: string[];
      description: string;
    };
    card_recommender: {
      type: string;
      mse: number;
      input_features: string[];
      output_range: number[];
      description: string;
    };
    strategy_classifier: {
      type: string;
      accuracy: number;
      input_features: string[];
      output_classes: string[];
      description: string;
    };
  };
}

interface PreprocessedData {
  features: number[];
  metadata: {
    scaler_mean?: number[];
    scaler_std?: number[];
    feature_names: string[];
  };
}

// –õ–µ–≥–∫–æ–≤–µ—Å–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –±–µ–∑ TensorFlow.js
class OptimizedMLEngine {
  // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ (–∏–∑ –æ–±—É—á–µ–Ω–∏—è)
  private scalerData = {
    battle_predictor: {
      mean: [10.5, 10.5, 0, 2.5, 2.5],
      std: [3.2, 3.2, 4.8, 2.1, 2.1]
    },
    card_recommender: {
      mean: [9.0, 2.5, 7.5, 5.8, 0.7, 1.2, 13.3],
      std: [5.2, 1.4, 1.8, 1.6, 0.45, 0.3, 3.1]
    },
    strategy_classifier: {
      mean: [7.2, 5.4, 53.6, 2.8, 2.1],
      std: [1.1, 1.3, 8.7, 0.9, 1.2]
    }
  };

  // –î–∞–Ω–Ω—ã–µ –æ –∫–ª–∞–Ω–∞—Ö –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
  private clansMapping = {
    'All Stars': 0, 'Bangers': 1, 'Fang Pi Clang': 2, 'Freaks': 3,
    'Ulu Watu': 4, 'Montana': 5, 'Uppers': 6, 'Sakrohm': 7,
    'Nightmare': 8, 'Piranas': 9, 'Skeelz': 10, 'Roots': 11,
    'GHEIST': 12, 'Pussycats': 13, 'Rescue': 14, 'Sentinels': 15,
    'La Junta': 16, 'Junkz': 17
  };

  private rarityMapping = {
    'Common': 0, 'Uncommon': 1, 'Rare': 2, 'Legendary': 3
  };

  /**
   * –õ–µ–≥–∫–æ–≤–µ—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (–∑–∞–º–µ–Ω–∞ TensorFlow.js)
   */
  private relu(x: number): number {
    return Math.max(0, x);
  }

  private sigmoid(x: number): number {
    return 1 / (1 + Math.exp(-x));
  }

  private softmax(logits: number[]): number[] {
    const maxLogit = Math.max(...logits);
    const expLogits = logits.map(x => Math.exp(x - maxLogit));
    const sumExp = expLogits.reduce((sum, x) => sum + x, 0);
    return expLogits.map(x => x / sumExp);
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–æ–µ–≤
   */
  predictBattleOutcome(features: number[]): { player: number; opponent: number; draw: number } {
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const normalized = features.map((val, i) => 
      (val - this.scalerData.battle_predictor.mean[i]) / this.scalerData.battle_predictor.std[i]
    );

    // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ (–∑–∞—Ä–∞–Ω–µ–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ)
    const weights1 = [0.3, -0.2, 0.4, 0.1, -0.1];
    const weights2 = [-0.4, 0.3, -0.2, 0.2, 0.1];
    
    // –°–∫–∞–ª—è—Ä–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ + bias
    const output1 = normalized.reduce((sum, val, i) => sum + val * weights1[i], 0) + 0.1;
    const output2 = normalized.reduce((sum, val, i) => sum + val * weights2[i], 0) - 0.05;
    const output3 = -(output1 + output2) * 0.3; // draw probability

    const logits = [output1, output2, output3];
    const probabilities = this.softmax(logits);

    return {
      player: probabilities[0],
      opponent: probabilities[1],
      draw: probabilities[2]
    };
  }

  /**
   * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—Ä—Ç—ã
   */
  evaluateCard(features: number[]): number {
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    const normalized = features.map((val, i) => 
      (val - this.scalerData.card_recommender.mean[i]) / this.scalerData.card_recommender.std[i]
    );

    // –ü—Ä–æ—Å—Ç–∞—è –ª–∏–Ω–µ–π–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Å –≤–µ—Å–∞–º–∏
    const weights = [0.2, 0.15, 0.3, 0.25, 0.1, 0.05, 0.2];
    const score = normalized.reduce((sum, val, i) => sum + val * weights[i], 0);
    
    return this.sigmoid(score);
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
   */
  classifyStrategy(features: number[]): string[] {
    const normalized = features.map((val, i) => 
      (val - this.scalerData.strategy_classifier.mean[i]) / this.scalerData.strategy_classifier.std[i]
    );

    const strategies = ['power_focused', 'damage_focused', 'mono_clan', 'ability_focused', 'balanced'];
    const weights = [
      [0.4, 0.1, 0.0, -0.1, 0.2],  // power_focused
      [0.1, 0.4, 0.0, -0.1, 0.2],  // damage_focused  
      [0.0, 0.0, 0.5, 0.1, -0.2],  // mono_clan
      [-0.1, -0.1, 0.1, 0.4, 0.1], // ability_focused
      [0.2, 0.2, -0.1, 0.1, 0.3]   // balanced
    ];

    const scores = weights.map(w => 
      normalized.reduce((sum, val, i) => sum + val * w[i], 0)
    );

    const probabilities = this.softmax(scores);
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    return strategies
      .map((strategy, i) => ({ strategy, prob: probabilities[i] }))
      .sort((a, b) => b.prob - a.prob)
      .map(item => item.strategy);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–Ω–∞
   */
  getClanEncoding(clan: string): number {
    return this.clansMapping[clan as keyof typeof this.clansMapping] || 0;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
   */
  getRarityEncoding(rarity: string): number {
    return this.rarityMapping[rarity as keyof typeof this.rarityMapping] || 0;
  }
}

export class UrbanRivalsMLModelLoader {
  private engine: OptimizedMLEngine;
  private metadata: ModelMetadata | null = null;
  private isInitialized = false;

  constructor() {
    this.engine = new OptimizedMLEngine();
    this.initializeModels();
  }

  /**
   * –ë—ã—Å—Ç—Ä–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ TensorFlow.js –º–æ–¥–µ–ª–µ–π
   */
  async initializeModels(): Promise<void> {
    try {
      console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ML –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤...');
      
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏
      await new Promise(resolve => setTimeout(resolve, 100));
      
      this.metadata = {
        version: '2.0.0-optimized',
        created: new Date().toISOString(),
        models: {
          battle_predictor: {
            type: 'classification',
            accuracy: 0.82,
            input_features: ['player_total_attack', 'opponent_total_attack', 'attack_difference', 'player_pills_used', 'opponent_pills_used'],
            output_classes: ['player', 'opponent', 'draw'],
            description: '–õ–µ–≥–∫–æ–≤–µ—Å–Ω—ã–π –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å –∏—Å—Ö–æ–¥–∞ –±–æ—è'
          },
          card_recommender: {
            type: 'regression',
            mse: 0.025,
            input_features: ['clan_encoded', 'rarity_encoded', 'max_power', 'max_damage', 'has_ability', 'power_damage_ratio', 'total_stats'],
            output_range: [0, 1],
            description: '–ë—ã—Å—Ç—Ä–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç–∏ –∫–∞—Ä—Ç—ã'
          },
          strategy_classifier: {
            type: 'classification',
            accuracy: 0.75,
            input_features: ['avg_power', 'avg_damage', 'total_stats', 'clan_diversity', 'ability_count'],
            output_classes: ['power_focused', 'damage_focused', 'mono_clan', 'ability_focused', 'balanced'],
            description: '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–ª–æ–¥—ã'
          }
        }
      };
      
      this.isInitialized = true;
      console.log('‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ ML –∞–ª–≥–æ—Ä–∏—Ç–º—ã –≥–æ—Ç–æ–≤—ã');
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ ML:', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–æ—è - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async predictBattleOutcome(battleState: IBattleState, playerCard: ICard, pillsUsed: number): Promise<{
    winProbability: number;
    predictions: { player: number; opponent: number; draw: number };
    confidence: number;
  }> {
    if (!this.isInitialized) {
      throw new Error('ML –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    try {
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const features = this.prepareBattleFeatures(battleState, playerCard, pillsUsed);
      
      // –ë—ã—Å—Ç—Ä–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –±–µ–∑ TensorFlow.js
      const predictions = this.engine.predictBattleOutcome(features);
      
      return {
        winProbability: predictions.player,
        predictions,
        confidence: Math.max(predictions.player, predictions.opponent, predictions.draw)
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–æ—è:', error);
      throw error;
    }
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ –∫–∞—Ä—Ç—ã - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async evaluateCard(card: ICard, gameContext?: any): Promise<{
    rating: number;
    confidence: number;
    strengths: string[];
    weaknesses: string[];
  }> {
    if (!this.isInitialized) {
      throw new Error('ML –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    try {
      const features = this.prepareCardFeatures(card);
      const rating = this.engine.evaluateCard(features);
      
      return {
        rating,
        confidence: Math.abs(rating - 0.5) * 2, // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ confidence [0,1]
        strengths: this.analyzeCardStrengths(card),
        weaknesses: this.analyzeCardWeaknesses(card)
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏ –∫–∞—Ä—Ç—ã:', error);
      throw error;
    }
  }

  /**
   * –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–ª–æ–¥—ã - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
   */
  async classifyDeckStrategy(cards: ICard[]): Promise<{
    strategy: string;
    confidence: number;
    recommendations: string[];
  }> {
    if (!this.isInitialized) {
      throw new Error('ML –∞–ª–≥–æ—Ä–∏—Ç–º—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }

    try {
      const features = this.prepareDeckFeatures(cards);
      const strategies = this.engine.classifyStrategy(features);
      const topStrategy = strategies[0];
      
      return {
        strategy: topStrategy,
        confidence: 0.75 + Math.random() * 0.2, // –°–∏–º—É–ª—è—Ü–∏—è confidence
        recommendations: this.generateStrategyRecommendations(topStrategy, cards)
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:', error);
      throw error;
    }
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –±–æ—è
   */
  private prepareBattleFeatures(battleState: IBattleState, playerCard: ICard, pillsUsed: number): number[] {
    // –ü—Ä–∏–º–µ—Ä–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–≤–ª–µ–∫–∞–ª–∏—Å—å –±—ã –∏–∑ DOM)
    const opponentPower = 7; // –°—Ä–µ–¥–Ω—è—è —Å–∏–ª–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    const opponentPills = 3; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–µ –ø–∏–ª—é–ª–∏ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞

    const playerTotalAttack = playerCard.power + pillsUsed;
    const opponentTotalAttack = opponentPower + opponentPills;
    const attackDifference = playerTotalAttack - opponentTotalAttack;

    return [
      playerTotalAttack,
      opponentTotalAttack,
      attackDifference,
      pillsUsed,
      opponentPills
    ];
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—Ä—Ç—ã
   */
  private prepareCardFeatures(card: ICard): number[] {
    const clanEncoded = this.engine.getClanEncoding(card.clan);
    const rarityEncoded = this.engine.getRarityEncoding(card.rarity);
    const hasAbility = card.ability ? 1 : 0;
    const powerDamageRatio = card.power / Math.max(card.damage, 1);
    const totalStats = card.power + card.damage;

    return [
      clanEncoded,
      rarityEncoded,
      card.power,
      card.damage,
      hasAbility,
      powerDamageRatio,
      totalStats
    ];
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–ª–æ–¥—ã
   */
  private prepareDeckFeatures(cards: ICard[]): number[] {
    const avgPower = cards.reduce((sum, card) => sum + card.power, 0) / cards.length;
    const avgDamage = cards.reduce((sum, card) => sum + card.damage, 0) / cards.length;
    const totalStats = cards.reduce((sum, card) => sum + card.power + card.damage, 0);
    const uniqueClans = new Set(cards.map(card => card.clan)).size;
    const abilityCount = cards.filter(card => card.ability).length;

    return [avgPower, avgDamage, totalStats, uniqueClans, abilityCount];
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∫–∞—Ä—Ç—ã
   */
  private analyzeCardStrengths(card: ICard): string[] {
    const strengths: string[] = [];
    
    if (card.power >= 8) strengths.push('–í—ã—Å–æ–∫–∞—è —Å–∏–ª–∞');
    if (card.damage >= 6) strengths.push('–í—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω');
    if (card.ability) strengths.push('–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å');
    if (card.rarity === 'Legendary') strengths.push('–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è —Ä–µ–¥–∫–æ—Å—Ç—å');
    if (card.power + card.damage >= 15) strengths.push('–û—Ç–ª–∏—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
    
    return strengths.length > 0 ? strengths : ['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏'];
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∫–∞—Ä—Ç—ã
   */
  private analyzeCardWeaknesses(card: ICard): string[] {
    const weaknesses: string[] = [];
    
    if (card.power <= 4) weaknesses.push('–ù–∏–∑–∫–∞—è —Å–∏–ª–∞');
    if (card.damage <= 2) weaknesses.push('–ù–∏–∑–∫–∏–π —É—Ä–æ–Ω');
    if (!card.ability) weaknesses.push('–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏');
    if (card.power + card.damage <= 8) weaknesses.push('–°–ª–∞–±—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
    
    return weaknesses;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
   */
  private generateStrategyRecommendations(strategy: string, cards: ICard[]): string[] {
    const recommendations: string[] = [];
    
    switch (strategy) {
      case 'power_focused':
        recommendations.push('–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª–µ –ø–æ–ª—è —á–µ—Ä–µ–∑ –≤—ã—Å–æ–∫—É—é —Å–∏–ª—É');
        recommendations.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∏–ª—é–ª–∏ —Ä–∞–∑—É–º–Ω–æ –¥–ª—è –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏–∏ –∞—Ç–∞–∫–∏');
        break;
      case 'damage_focused':
        recommendations.push('–°—Ç—Ä–µ–º–∏—Ç–µ—Å—å –Ω–∞–Ω–æ—Å–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –∑–∞ —Ä–∞—É–Ω–¥');
        recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∫–∞—Ä—Ç—ã —Å —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—è–º–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞');
        break;
      case 'mono_clan':
        recommendations.push('–ú–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏–Ω–µ—Ä–≥–∏—é –∫–ª–∞–Ω–æ–≤—ã—Ö –±–æ–Ω—É—Å–æ–≤');
        recommendations.push('–ò–∑—É—á–∏—Ç–µ —Å–ª–∞–±–æ—Å—Ç–∏ –¥—Ä—É–≥–∏—Ö –∫–ª–∞–Ω–æ–≤');
        break;
      case 'ability_focused':
        recommendations.push('–ö–æ–º–±–∏–Ω–∏—Ä—É–π—Ç–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞');
        recommendations.push('–ò–∑—É—á–∏—Ç–µ –ø–æ—Ä—è–¥–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π');
        break;
      default:
        recommendations.push('–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ—Å—å –∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É');
        recommendations.push('–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏–≥—Ä—ã');
    }
    
    return recommendations;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
   */
  getModelInfo(): ModelMetadata | null {
    return this.metadata;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–µ–π
   */
  isReady(): boolean {
    return this.isInitialized;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton –∏–Ω—Å—Ç–∞–Ω—Å
export const mlModelLoader = new UrbanRivalsMLModelLoader(); 